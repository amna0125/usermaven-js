name: Develop CI/CD Pipeline

on:
  issue_comment:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  sonarqube_analysis:
    name: sonarqube_analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL:  ${{ secrets.SONAR_HOST_URL }}
        
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  codium_ai_analysis:
    runs-on: ubuntu-latest
    if: ${{ github.event.sender.type != 'Bot' }}
    permissions:
      issues: write
      pull-requests: write
      contents: write
    name: Run pr agent on every pull request, respond to user comments
    steps:
      - name: PR Agent action step
        id: pragent
        uses: Codium-ai/pr-agent@main
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          github_action.auto_review: "true"
          github_action.auto_describe: "true"
          github_action.auto_improve: "true"
          pr_description.publish_labels: "true"
          pr_update_changelog.push_changelog_changes: "true"
          pr_code_suggestions.num_code_suggestions: 50
          pr_code_suggestions.rank_suggestions: true
          pr_reviewer.require_focused_review: true
          pr_reviewer.require_score_review: true
          pr_reviewer.require_estimate_effort_to_review: false
          pr_reviewer.num_code_suggestions: 50
          pr_reviewer.remove_previous_review_comment: true
          pr_reviewer.require_all_thresholds_for_incremental_review: true         

  # merge_push_master:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master' && success()
  #   needs: [sonarqube_analysis, codium_ai_analysis]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Merge and Push to Develop
  #       run: |
  #         git config --global user.email "you@example.com"
  #         git config --global user.name "Your Name"
  #         git checkout develop
  #         git merge master
  #         git push origin develop

  # master_deploy_bunnycdn:
  #   runs-on: ubuntu-latest
  #   if: github.event.pull_request.merged == true && github.ref == 'refs/heads/develop'
  #   needs: [sonarqube_analysis, codium_ai_analysis]
  #   steps:
  #     - name: Stage Deploy to BunnyCDN
  #       run: |
  #         # Deployment script or command for BunnyCDN

  #     - name: Stage Deploy to Kubernetes
  #       run: |
  #         # Deployment script or command for Kubernetes

  release_on_merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: rymndhng/release-on-push-action@master
        with:
          bump_version_scheme: patch


  master_publish_to_nmpjs:
    runs-on: ubuntu-latest
    #if: github.event.pull_request.merged == true
    needs: [release_on_merge]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install

      - name: Ignore Workspace root check
        run: yarn global add npm-cli-login --ignore-workspace-root-check  

      - name: Build project
        run: yarn build

      - name: Set package version to release version
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          for package in packages/*; do
            if [ -d "$package" ]; then
              echo "Setting version for $package to $VERSION"
              cd $package
              npm version $VERSION --no-git-tag-version
              cd - > /dev/null
            fi
          done

    #   - name: Publish each package
    #     run: |
    #       for package in packages/*; do
    #         if [ -d "$package" ]; then
    #           echo "Publishing $package"
    #           cd $package
    #           yarn publish --non-interactive --access public
    #           cd - > /dev/null
    #         fi
    #       done
    #     env:
    #       NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}